{"id": "data-wrangling-001", "type": "Data Wrangling", "instruction": "Clean the dataset by deleting records with null values or a total_gross of 0. Preserve the columns genre, release_year, total_gross, and inflation_adjusted_gross. Organize the data by grouping the same genres together and sorting them by release_year in ascending order. Save the cleaned dataset as \"disney_movies_total_gross_cleaned.csv\".", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-002", "type": "Data Wrangling", "instruction": "Compute the is_arrested values for various ratings and store the results strictly according to the provided format in \"result.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-003", "type": "Data Wrangling", "instruction": "Clean the data based on the requirements specified in the README file. Save the cleaned dataset to 'cleaned_cars_details_merges.csv'.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-004", "type": "Data Wrangling", "instruction": "Follow the data schema to add new columns. Save the result in 'cleaned_cars_details_merges.csv'", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-005", "type": "Data Wrangling", "instruction": "Standardize the terms and descriptions in the 'brake type' and 'tyre type' fields. Save the result to 'cleaned_cars_details_merges.csv'.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-006", "type": "Data Wrangling", "instruction": "Transform the data according to the provided schema. Save the cleaned data to 'cleaned_ebola.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-007", "type": "Data Wrangling", "instruction": "Ensure consistency by standardizing the terms and descriptions in the 'Gear Box' and 'Drive Type' fields, so that different terminologies referring to the same types of gearboxes and drive systems are unified. Save the final dataset to 'cleaned_cars_details_merges.csv'.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-008", "type": "Data Wrangling", "instruction": "Transform the weather data based on the provided data schema to prepare it for further analysis. Save the cleaned dataset as 'cleaned_weather.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-009", "type": "Data Wrangling", "instruction": "Standardize the terminology and descriptions in the 'Fuel Supply System' field to ensure consistency. Save the updated data to 'cleaned_cars_details_merges.csv'.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-010", "type": "Data Wrangling", "instruction": "Compute the arrest rates for each type of violation across different weather ratings. Save the results to result.csv.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-011", "type": "Data Wrangling", "instruction": "Based on the requirements specified in the README file, generate a new data information table. Save the final table to result.csv.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-012", "type": "Data Wrangling", "instruction": "Merge and organize data, then save the source and Net Promoter Score group in the predefined format. Fill the results into 2020Q4.csv following its existing format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-013", "type": "Data Wrangling", "instruction": "Transform the 'Male Risk Development Percentage' and 'Female Risk Development Percentage' columns from percentages to decimal numbers. Calculate the difference in risk development between genders and save it in the 'Male-Female Dev. Diff.' column. Format the data according to 'result.csv' and save it.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-014", "type": "Data Wrangling", "instruction": "Using the data standards from the local document, clean the NYC_Open_Data_Parking_Violations dataset in the database by removing any noisy data. Save the cleaned dataset to 'cleaned_parking_violation.db'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-015", "type": "Data Wrangling", "instruction": "Process the dataset directly in the original file, converting fuel consumption to L/100km and normalizing the car dimensions (length, width, height) to meet local standards. Save the cleaned data to 'cleaned_data.csv'.\n", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-016", "type": "Data Wrangling", "instruction": "Manage missing data in the NYC_Open_Data_Parking_Violations dataset by either dropping or replacing it. Drop rows if necessary, and drop columns only if most entries are empty. Replace missing values with the mean, mode, or other appropriate methods. Save the cleaned data to 'cleaned_data.csv'.\n", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-017", "type": "Data Wrangling", "instruction": "Identify and remove duplicate entries in the NYC_Open_Data_Parking_Violations dataset where residents received multiple tickets for the same violation. Save the cleaned data to 'cleaned_parking_violation.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-018", "type": "Data Wrangling", "instruction": "Follow the instructions in 'tips.md' to clean the dataset using the IQR method. Save the cleaned data according to the format provided in 'cleaned_data.csv'.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-019", "type": "Data Wrangling", "instruction": "For the 'Units Sold (million)' column, identify missing values and fill them using the average from the respective 'Manufacturer' group. After completing the imputation, format the cleaned data to match 'sales_data_imputed.csv' and save it accordingly.\n", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-020", "type": "Data Wrangling", "instruction": "Identify the top five days of the month with the highest number of earthquakes across all data. Save these days (as numbers, e.g., 11 for the 11th) along with their earthquake counts in 'result.csv' according to the specified format.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-021", "type": "Data Wrangling", "instruction": "Follow the data cleanup steps outlined in the provided Python file, which involve processing missing values and normalizing the data. Save the final cleaned and normalized dataset to result.csv.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-022", "type": "Data Wrangling", "instruction": "Transform the airquality DataFrame from a wide to long format. Then, generate a pivot table with 'Month' and 'Day' as indexes, with different air quality metrics as columns and their readings as values. Save the result in 'cleaned_airquality.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-023", "type": "Data Wrangling", "instruction": "Follow the data schema to add or delete some columns, and refine some columns. Save the result in 'cleaned_cars_details_merges.csv'", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-024", "type": "Data Wrangling", "instruction": "Follow the data schema to change the type of columns. Save the result in 'cleaned_cars_details_merges.csv'", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-025", "type": "Data Wrangling", "instruction": "Please refer to the schema document to modify the data. Save the result in 'cleaned_cars_details_merges.csv'", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-026", "type": "Data Wrangling", "instruction": "Identify and extract job-related information such as job titles, technical skills, and educational degrees from the dataset. Save this information in \"result.csv\".", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-027", "type": "Data Wrangling", "instruction": "Follow the requirements in the standard document to retain only the specified columns and eliminate duplicate rows. Save the processed data in 'cleaned_cars_details_merges.csv'.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-028", "type": "Data Wrangling", "instruction": "Remove duplicate entries in the dataset by focusing on the 'Lifter Name' and 'Lift Type' columns, keeping just the first row for each duplicate group. Save the resulting data in the same format as 'cleaned_data.csv'.\n", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-029", "type": "Data Wrangling", "instruction": "Remove the following columns: 'Friend's Tagged', 'Route Name', 'GPX File', 'Activity Id', 'Calories Burned', and 'Notes'. Replace \"Other\" activity type with \"Unicycling\" and perform mean imputation for missing heart rate values within each activity type. Save the cleaned data into 'cleaned_cycle.csv', 'cleaned_run.csv', and 'cleaned_walk.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-030", "type": "Data Wrangling", "instruction": "Clean the data according to the provided schema. Save the cleaned data to 'cleaned_RI-clean.csv'.\n", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-031", "type": "Data Wrangling", "instruction": "Adhere to the data standard to clean the dataset. Fill any missing values by using the most frequent value (mode) for each group of records sharing the same Street Name and Block. Save the final cleaned dataset to \"Building_Permits.csv\".", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-032", "type": "Data Wrangling", "instruction": "Follow the data standards provided in the local document to clean the NYC_Open_Data_Parking_Violations dataset. Correct or remove any noisy data, and save the resulting dataset to 'cleaned_parking_violation.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-033", "type": "Data Wrangling", "instruction": "Filter the database to keep only the information related to airports and aircraft. Ensure all data is in English. Make these modifications directly in the original file and save the changes.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-034", "type": "Data Wrangling", "instruction": "Refer to 'tips.md' for detailed instructions on cleaning the dataset. Once cleaned, ensure the data is saved in the original format as 'laptop_cleaned.csv'.\n", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-035", "type": "Data Wrangling", "instruction": "Merge the provided datasets and save the combined data to RI-clean.csv.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-036", "type": "Data Wrangling", "instruction": "Refer to 'tips.md' for instructions on cleaning the dataset by eliminating outliers with the IQR method. Make sure the data is ready for further analysis, then save it in its original format as 'cleaned_data.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-038", "type": "Data Wrangling", "instruction": "load the data into the sqlite database 'database.db' as specified in the schema.yml.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-039", "type": "Data Wrangling", "instruction": "Complete data wrangling according to the predefined data schema and generate five new CSV files, named as specified in the schema.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-040", "type": "Data Wrangling", "instruction": "Load the data into the SQLite database 'database.db' as specified in the schema.yml.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-041", "type": "Data Wrangling", "instruction": "Extract the database from the provided archive. Count the number of wrestling championships related to WWE, WWF, WWWF, WCW, NXT, and ECW. Group the results by brand and sort by the number of championships from most to least. Fill in the result according to the format provided in 'result.csv'.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-042", "type": "Data Wrangling", "instruction": "From the `fortune500` dataset, calculate the profits for each sector using the columns `sector` and `pct80`. Save these calculations to profit.csv. Additionally, find the first occurrence date for each tag in the `stackoverflow` dataset using the columns `tag` and `mindate`, and save these dates to startdates.csv.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-043", "type": "Data Wrangling", "instruction": "Unzip the database file to access the data. Calculate the flight counts for each departure airport and sort them by number of flights. Select the top 5 airports with the most flights and the bottom 5 with the fewest. Save these results in 'departure.csv', following the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-044", "type": "Data Wrangling", "instruction": "Unzip the provided database file. Read the data from the tables and sort it in ascending order based on the 'range' field. Extract the top 10 rows and save the results according to the format in 'airRange.csv'.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-045", "type": "Data Wrangling", "instruction": "Extract the database from the archive. Query the data to find the wrestlers with the most wins in \"Elimination Chamber\" events. Rank the wrestlers by their number of wins and extract the top three, along with their win counts. Fill in the results according to the format in 'result.csv'.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-046", "type": "Data Wrangling", "instruction": "Unzip the provided database file. Extract the data including flight ID, departure city with its coordinates, and arrival city with its coordinates. Save the results in 'result.csv' according to the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-047", "type": "Data Wrangling", "instruction": "Load these csv into the wwe.db sqlite database according to the schema", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-048", "type": "Data Wrangling", "instruction": "Combine the columns from all CSV files into a single large table and load the data into the SQLite database named 'database.db'.\n", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-049", "type": "Data Wrangling", "instruction": "Organize the newly arrived player data. Check for duplicates and add the unique entries to the sport.db database.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-050", "type": "Data Wrangling", "instruction": "Load these csv into the sport.db sqlite database according to the schema", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-051", "type": "Data Wrangling", "instruction": "Unzip the database to access the wrestling data. Count the championship belts for male and female wrestlers across WWE, WWF, WWWF, WCW, NXT, and ECW brands, excluding entries related to 'title change', Briefcase, King of the Ring, and Royal Rumble. Group the counts by brand and gender, then record the results in 'result.csv', ensuring the format matches the provided structure.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-052", "type": "Data Wrangling", "instruction": "Identify directors who have released at least three movies in consecutive years. Save the names of these directors strictly according to the provided format in 'result.csv'. ", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-053", "type": "Data Wrangling", "instruction": "Apply the DENSE_RANK window function to rank each movie within its director's collection based on 'vote_average'. Rank all movies by their ratings among the films directed by the same person. Save the formatted data to 'result.csv' according to the provided structure.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-054", "type": "Data Wrangling", "instruction": "Extract the database from the archive. For each championship title in NXT, find the shortest title match. List the wrestlers involved, match duration, victory type, location, and event name. Group the results by championship title, ranking by match duration, and fill in the data according to the format in 'result.csv'.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-055", "type": "Data Wrangling", "instruction": "Find the players with the longest and shortest lifespans, calculate their ages, and ensure the results are formatted according to \"result.csv\". Save the results accordingly.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-056", "type": "Data Wrangling", "instruction": "Identify each batsman's number of ducks (zero scores) and count the matches where they scored zero runs. Sort the results by the number of ducks in descending order and save them in \"ducks.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-057", "type": "Data Wrangling", "instruction": "Count the number of movies directed by each director and sort the results in descending order by the number of movies. Save the results in \"movies_all.csv\" according to the provided format.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-058", "type": "Data Wrangling", "instruction": "Unzip and load the database from the provided archive. Filter the data to include matches from Spain, Germany, France, Italy, and England. For each combination of country, league, and season, compute the number of stages, number of teams, average goals scored by home and away teams, goal difference, and total goals. Only include records where the number of stages is greater than 10. Sort the results by country, league, and season, and populate \"leages_by_season.csv\" following the specified format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-059", "type": "Data Wrangling", "instruction": "Identify the top 10 actors whose films have the highest rental counts, sorted in descending order. Fill in their details strictly according to the provided format in the file, \"result.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-060", "type": "Data Wrangling", "instruction": "Identify the total number of movies available in inventory for each category. Ensure the results are entered strictly according to the given format in the file, \"films_in_inv.csv\".", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-061", "type": "Data Wrangling", "instruction": "Determine the percentage of individuals with a family history of mental health issues across all records to explore the connection between family mental health history and overall mental health. Populate the results into \"result.csv\" following the specified format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-062", "type": "Data Wrangling", "instruction": "Extract the list of actors for every movie from the database. Ensure the data is formatted strictly according to the provided format in \"actors.csv\" and load it into this file. ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-063", "type": "Data Wrangling", "instruction": "Find the highest batting averages and strike rates for batsmen who have participated in at least 50 matches. Sort the results by batting average and strike rate in descending order. Save the results in \"highest_avg.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-064", "type": "Data Wrangling", "instruction": "After replacing missing values with 'NaN', compute the average base salary of employees. Filter out those employees whose base salary falls within ±10,000 of the average salary. Populate the results into \"medium_employees.csv\" following the specified format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-065", "type": "Data Wrangling", "instruction": "Compile the rental count and total revenue for each movie category from the database. Calculate the number of rentals and total payment for each category, ensuring the results are sorted by rental count in descending order. Format the data strictly according to the provided format in \"result.csv\" and save the results in this file. ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-066", "type": "Data Wrangling", "instruction": "Compute the overdue rental percentage for each customer. Generate a list that includes the customer’s name, email, and overdue percentage, sorted by overdue percentage in descending order. Populate the data strictly according to the specified format in the file, \"result.csv\".", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-067", "type": "Data Wrangling", "instruction": "Count the number of non-self-employed employees working in tech companies who participated in the survey, broken down by year and state. Save the results in \"result.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-068", "type": "Data Wrangling", "instruction": "Generate a count of films for each category, sorted from highest to lowest. Include the corresponding category ID and number of films, and populate the data into \"result.csv\" as per the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-069", "type": "Data Wrangling", "instruction": "Calculate the percentage of male and female employees who discussed mental health issues between 2017 and 2019, grouped by discussion type (with employer or with colleagues). Save the results in \"result.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-070", "type": "Data Wrangling", "instruction": "Group and adjust player heights (set heights below 165 to 165, and heights above 195 to 195). For each adjusted height group, calculate the number of players, average rating, potential, and weight. Save the results strictly according to the provided format in the file, \"players_height.csv\".", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-071", "type": "Data Wrangling", "instruction": "Find the director who generated the highest revenue and list the information of the movies they directed. Populate the data into \"moviesByHighestRevenue.csv\" following the specified format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-072", "type": "Data Wrangling", "instruction": "Extract the names, birthdates, and total wins of each driver from the Formula 1 database, and order the results by the number of wins from highest to lowest. Populate the data into \"total_wins_by_driver.csv\" following the specified format.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-073", "type": "Data Wrangling", "instruction": "Calculate the rolling averages and standard deviations for height measurements in manufacturing. Establish control limits based on these statistics and flag any measurements that fall outside these limits. Fill the results into the provided file, 'result.csv', using the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-074", "type": "Data Wrangling", "instruction": "I want to know the best fighters of every UFC weight class. Tell me in each class, how many fighters have never been defeated. Please fill in the results into the provided file, \"undefeated.csv\", using the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-075", "type": "Data Wrangling", "instruction": "Identify the most common categories for the oldest businesses on each continent. For categories with more than 5 businesses, provide the continent, category, and count. Ensure to fill your findings into the provided file, \"result.csv\", using the given format. ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-076", "type": "Data Wrangling", "instruction": "Generate a report listing the top five assignments by total donation amounts. For each assignment, include the assignment name, region, total rounded donation amount, and donor type. Fill the results in the provided file, \"result.csv\", using the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-077", "type": "Data Wrangling", "instruction": "Query the SQLite database for movie and director information, sorted by box office revenue in descending order.  Fill the results into 'mostProfit.csv' according to the provided template.\n", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-078", "type": "Data Wrangling", "instruction": "List the names of directors along with the number of movies they've directed and their total revenue. Save the results in \"mostProfitableDirector.csv\" according to the provided format.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-079", "type": "Data Wrangling", "instruction": "Find the film category with the largest total expenditure. Record its name and the total amount spent, ensuring the results are entered into \"result.csv\" according to the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-080", "type": "Data Wrangling", "instruction": "Extract and load the data from the compressed database file. Filter the records to include only those for matches in Spain. Sort these records by date and select the top 10 entries. Save the filtered and sorted data in \"result.csv\" according to the given format.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-081", "type": "Data Wrangling", "instruction": "Retrieve the best performance for each bowler in every IPL match, including the maximum wickets taken and runs conceded. Sort the results by the number of wickets in descending order, and display the bowler's name, nationality, and bowling skill. Save the results strictly according to the provided format in \"highest_wicket.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-082", "type": "Data Wrangling", "instruction": "Retrieve the best performance for each bowler in every IPL match, including the maximum wickets taken and runs conceded. Sort the results by the number of wickets in descending order, and display the bowler's name, nationality, and bowling skill. Save the results strictly according to the provided format in \"result.csv\".", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-083", "type": "Data Wrangling", "instruction": "For each bowler who has bowled at least 50 overs, determine their total runs conceded, total wickets taken, best performance, and number of matches. Sort the data primarily by economy rate in ascending order, and secondarily by the number of wickets taken in descending order. Populate the results into \"best_bowler.csv\" following the specified format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-084", "type": "Data Wrangling", "instruction": "Identify the baseball players who excel in each metric (e.g., Games Played, Runs, Hits, Home Runs). Save the top performer for each metric in \"result.csv\" according to the provided format.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-085", "type": "Data Wrangling", "instruction": "Generate a comprehensive report on each cricket player's performance, including batting average, highest score, number of thirties, fifties, bowling wickets, and economy rate. Ensure these metrics are matched with their bowling skills and format the data strictly according to the provided format in \"result.csv\". Save the results in this file. ", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-086", "type": "Data Wrangling", "instruction": "Identify how many rented movies were returned late, early, and on time. Ensure the results are formatted strictly according to the provided format in \"result.csv\" and save them in this file. ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-087", "type": "Data Wrangling", "instruction": "Create a report listing cities with the number of active and inactive customers, with active customers defined as those where customer.active = 1. Ensure the data is sorted by the number of inactive customers in descending order and enter the results into \"result.csv\" according to the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-088", "type": "Data Wrangling", "instruction": "Determine the top 3 actors who have appeared most often in films from the \"Children\" category. Include all actors with the same number of appearances if there are ties. Enter the results into \"result.csv\" as per the given format.", "hardness": "Hard", "post_process": []}
{"id": "data-wrangling-089", "type": "Data Wrangling", "instruction": "Calculate each player's career span by determining the difference between their first and last game dates in the \"YYYY-MM-DD\" format. Save the results strictly according to the provided format in \"result.csv\"", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-090", "type": "Data Wrangling", "instruction": "Evaluate the performance of bowlers in the last overs (16 to 20) by calculating the total runs conceded total overs bowled, total wickets taken and the wicket rate for each over. Sort the results primarily by economy rate in ascending order and secondarily by wicket rate in descending order. Select only those bowlers who have bowled at least 50 overs. Ensure the results are formatted according to \"death_overs_specialist.csv\" and save them accordingly.\n", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-091", "type": "Data Wrangling", "instruction": "Query the number of different tracks each driver raced on in all 2009 races, and sort the results by driver name in ascending order. Fill the results in \"driver_circuits.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-092", "type": "Data Wrangling", "instruction": "Select the top 5 highest-rated and bottom 5 lowest-rated movies. Retrieve their names, ratings, and global box office revenue, then label them as \"Highest Rated\" or \"Lowest Rated.\" Sort the results by global box office revenue in descending order and save them in \"result.csv\" according to the provided format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-093", "type": "Data Wrangling", "instruction": "Create a summary showing the total number of international students and their average depression scores. Ensure to fill in the results strictly according to the given format in the provided file, \"result.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-094", "type": "Data Wrangling", "instruction": "Prepare a summary showing the ten busiest start times for charging sessions, broken down by day and hour, specifically for shared users. Include the total session count for each period. Populate the data strictly according to the given format in the provided file, \"result.csv\".", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-095", "type": "Data Wrangling", "instruction": "Traverse multiple Olympic-related database tables to calculate the total medal count rankings for each country in each Olympic Games. Merge the data into a complete table and save the results strictly according to the provided format in \"olympics.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-096", "type": "Data Wrangling", "instruction": "Generate a report listing the highest-impact assignments in each region. For each assignment, include the assignment names, regions, impact scores, and the total number of donations received, but only for assignments that have received donations. Ensure to fill in the results strictly according to the given format in the provided file, \"result.csv\". ", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-097", "type": "Data Wrangling", "instruction": "Aggregate the total runs given up by each bowler in the matches, covering both normal and extra runs. Link these totals with the bowler's personal information, such as name, country, and bowling technique. Ensure the results are sorted by the total runs conceded from highest to lowest and formatted according to \"runs_concede_in_match.csv\". Save the results accordingly.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-098", "type": "Data Wrangling", "instruction": "Using data from 2019 to 2021, determine which industries had the highest average valuations. Identify the new unicorn companies within these industries. Make sure to fill your findings into the provided file, \"result.csv\", using the given format.", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-099", "type": "Data Wrangling", "instruction": "Calculate the average rating for each genre and rank them accordingly. Populate the results into \"genres_avg_rating.csv\" following the specified format.", "hardness": "Easy", "post_process": []}
{"id": "data-wrangling-100", "type": "Data Wrangling", "instruction": "Generate a list of industry groups showing the number of companies and their total carbon footprints for the latest year. Sort the list by footprint from highest to lowest. Save the results strictly according to the given format in the provided file, \"result.csv\".", "hardness": "Medium", "post_process": []}
{"id": "data-wrangling-101", "type": "Data Wrangling", "instruction": "Retrieve the name and revenue of the highest-grossing movie directed by each director, and sort the results by revenue in descending order. Fill the data into \"movies_all.csv\" according to the provided format.", "hardness": "Easy", "post_process": []}